import { readJSONBody, ok, badRequest, serverError, getIp } from "./_utils.mjs";
import { getStore } from "@netlify/blobs";
const store = getStore();

async function sendTelegramIfConfigured(text) {
  try {
    const token = (process.env.TELEGRAM_BOT_TOKEN || "").trim();
    if (!token) return;
    const chatId = await store.get("telegram_chat_id.txt");
    if (!chatId) return;
    await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify({ chat_id: chatId, text }),
    });
  } catch {}
}

export const handler = async (event) => {
  if (event.httpMethod !== "POST") return badRequest("POST only");
  try {
    const ip = getIp(event);
    const ua = event.headers["user-agent"] || "";
    const body = readJSONBody(event) || {};
    const payload = { ...body, ip, userAgent: ua, timestamp: new Date().toISOString() };
    const key = `logs/${Date.now()}-${Math.random().toString(36).slice(2)}.json`;
    await store.set(key, JSON.stringify(payload), { metadata: { ip } });
    const text = `New pass generated by ${body.name || "Unknown"} (class ${body.class || "?"}, date ${body.date || "?"}, release ${body.release_time || "?"})\nIP: ${ip}`;
    await sendTelegramIfConfigured(text);
    return ok({ ok: true, key });
  } catch (e) {
    return serverError(e);
  }
};
